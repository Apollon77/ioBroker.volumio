{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v1.31.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport bodyParser from 'body-parser';\nimport express from 'express';\nimport ipInfo from 'ip';\nimport { ApiResonse, PlayerState, StateChangeMsg, VolumioSystemInfo } from './types';\n\nclass Volumio extends utils.Adapter {\n\n    private playerState: PlayerState;\n    static readonly namespace = 'volumio.0.';\n    private axiosInstance: AxiosInstance;\n    private httpServer;\n    private httpServerInstance: any;\n    private checkConnectionInterval: any;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'volumio',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.axiosInstance = axios.create();\n        this.playerState = {} as PlayerState;\n        this.httpServer = express();\n        this.httpServer.use(bodyParser.urlencoded({ extended: false }));\n        this.httpServer.use(bodyParser.json());\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // Subsribe to all state changes\n        this.subscribeStates('*');\n\n        this.axiosInstance = axios.create({\n            baseURL: `http://${this.config.host}/api/v1/`,\n            timeout: 1000\n        });\n\n        // try to ping volumio\n        const connectionSuccess = await this.pingVolumio();\n\n        if (this.config.checkConnection) {\n            let interval = this.config.checkConnectionInterval;\n            if (!interval || !isNumber(interval)) {\n                this.log.error(`Invalid connection check interval setting. Will be set to 30s`);\n                interval = 30;\n            }\n            this.checkConnectionInterval = setInterval(this.checkConnection, interval*1000, this);\n        }\n\n        // get system infos\n        if (connectionSuccess) {\n            this.apiGet<VolumioSystemInfo>('getSystemInfo').then(sysInfo => {\n                this.setStateAsync('info.id', sysInfo.id, true);\n                this.setStateAsync('info.host', sysInfo.host, true);\n                this.setStateAsync('info.name', sysInfo.name, true);\n                this.setStateAsync('info.type', sysInfo.type, true);\n                this.setStateAsync('info.serviceName', sysInfo.serviceName, true);\n                this.setStateAsync('info.systemversion', sysInfo.systemversion, true);\n                this.setStateAsync('info.builddate', sysInfo.builddate, true);\n                this.setStateAsync('info.variant', sysInfo.variant, true);\n                this.setStateAsync('info.hardware', sysInfo.hardware, true);\n            });\n            // get inital player state\n            this.updatePlayerState();\n        }\n\n        if (this.config.subscribeToStateChanges && this.config.subscriptionPort && connectionSuccess) {\n            this.log.debug('Subscription mode is activated');\n            try {\n                this.httpServerInstance = this.httpServer.listen(this.config.subscriptionPort);\n                this.log.debug(`Server is listening on ${ipInfo.address()}:${this.config.subscriptionPort}`);\n                this.subscribeToVolumioNotifications();\n            } catch (error) {\n                this.log.error(`Starting server on ${this.config.subscriptionPort} for subscription mode failed: ${error.message}`);\n            }\n        } else if (this.config.subscribeToStateChanges && !this.config.subscriptionPort) {\n            this.log.error('Subscription mode is activated, but port is not configured.');\n        } else if (!this.config.subscribeToStateChanges && connectionSuccess) {\n            this.unsubscribeFromVolumioNotifications();\n        }\n\n        this.httpServer.post('/volumiostatus', (req, res) => {\n            this.onVolumioStateChange(req.body)\n            res.sendStatus(200);\n        });\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.unsubscribeFromVolumioNotifications();\n            // Here you must clear all timeouts or intervals that may still be active\n            if (this.checkConnectionInterval) {\n                clearInterval(this.checkConnectionInterval);\n                this.checkConnectionInterval = null;\n            }\n            // terminate express http server\n            this.httpServerInstance.close();\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (!id || !state) {\n            return;\n        }\n        if (state.ack) {\n            this.log.silly(`State change of ${id} to \"${state.val}\" was already acknowledged. No need for further actions`);\n            return;\n        }\n\n        switch (id.replace(`${this.namespace}.`, ``)) {\n            case 'getPlaybackInfo':\n                this.updatePlayerState();\n                break;\n            case 'player.mute':\n                this.volumeMute()\n                break;\n            case 'player.unmute':\n                this.volumeUnmute();\n                break;\n            case 'player.next':\n                this.sendCmd('next');\n                break;\n            case 'player.prev':\n                this.sendCmd('prev');\n                break;\n            case 'player.pause':\n                this.playbackPause();\n                break;\n            case 'player.play':\n                this.playbackPlay();\n                break;\n            case 'player.playN':\n                this.playbackPlay(state.val)\n                break;\n            case 'player.stop':\n                this.playbackStop();\n                break;\n            case 'player.toggle':\n                this.playbackToggle();\n                break;\n            case 'playbackInfo.volume':\n            case 'player.volume':\n                this.volumeSetTo(state.val);\n                break;\n            case 'player.volume.down':\n                this.volumeDown();\n                break;\n            case 'player.volume.up':\n                this.volumeUp();\n                break;\n            case 'queue.clearQueue':\n                this.sendCmd('clearQueue');\n                break;\n            case 'queue.repeatTrack':\n                this.sendCmd('repeat');\n                break;\n            case 'playbackInfo.random':\n            case 'queue.random':\n                this.setRandomPlayback(state.val);\n                break;\n            case 'queue.shuffleMode':\n                if (!isNumber(state.val)) {\n                    this.log.warn('queue.shuffleMode state change. Invalid state value passed');\n                    break;\n                }\n                if (state.val === 0) {\n                    this.setRandomPlayback(false);\n                } else if (state.val === 1) {\n                    this.setRandomPlayback(true);\n                } else if (state.val === 2) {\n                    this.log.warn('queue.shuffleMode 2 not implemented yet');\n                } else {\n                    this.log.warn('Invalid value to queue.shuffleMode passed');\n                }\n                break;\n            case 'queue.repeatTrackState':\n                this.setRepeatTrack(state.val);\n                break;\n        }\n    }\n\n    private sendCmd<ResT>(cmd: string): Promise<ResT> {\n        return this.apiGet<ResT>(`commands/?cmd=${cmd}`);\n    }\n\n    private async apiGet<ResT>(url: string): Promise<ResT> {\n        return this.axiosInstance.get<any, AxiosResponse<ResT>>(url).then(res => {\n            if (!res.status) {\n                throw new Error(`Error during GET on ${url}: ${res.statusText}`);\n            } else if (res.status !== 200) {\n                throw new Error(`GET on ${url} returned ${res.status}: ${res.statusText}`)\n            }\n            return res.data as ResT;\n        }).catch(error => {\n            throw new Error(`Error during GET on ${url}: ${error.message}`);\n        });\n    }\n\n    private async apiPost<ReqT, ResT>(url: string, data?: any): Promise<ResT> {\n        return await this.axiosInstance.post<ReqT, AxiosResponse<ResT>>(url, data).then(res => {\n            if (!res.status) {\n                throw new Error(`Error during POST on ${url}: ${res.statusText}`);\n            }\n            return res.data as ResT;\n        }).catch(error => {\n            throw new Error(`Error during POST on ${url}: ${error.message}`);\n        });\n    }\n\n    private async apiDelete<ReqT, ResT>(url: string, reqData?: any): Promise<ResT> {\n        return await this.axiosInstance.delete<ReqT, AxiosResponse<ResT>>(url, { data: reqData }).then(res => {\n            if (!res.status) {\n                throw new Error(`Error during DELETE on ${url}: ${res.statusText}`);\n            }\n            return res.data as ResT;\n        }).catch(error => {\n            throw new Error(`Error during DELETE on ${url}: ${error.message}`);\n        });\n    }\n\n    private updatePlayerState(): void {\n        this.apiGet<PlayerState>('getState').then(p => {\n            this.playerState = p;\n            this.propagatePlayserStateIntoStates(this.playerState);\n        }).catch(err => {\n            this.log.error(`Error during update of player state: ${err.message}`);\n        });\n    }\n\n    private propagatePlayserStateIntoStates(playerState: PlayerState): void {\n        this.setStateAsync('playbackInfo.album', playerState.album, true);\n        this.setStateAsync('playbackInfo.albumart', playerState.albumart, true);\n        this.setStateAsync('playbackInfo.artist', playerState.artist, true);\n        this.setStateAsync('playbackInfo.bitdepth', playerState.bitdepth, true);\n        this.setStateAsync('playbackInfo.channels', playerState.channels, true);\n        this.setStateAsync('playbackInfo.consume', playerState.consume, true);\n        this.setStateAsync('playbackInfo.disableVolumeControl', playerState.disableVolumeControl, true);\n        this.setStateAsync('playbackInfo.duration', playerState.duration, true);\n        this.setStateAsync('player.muted', playerState.mute, true);\n        this.setStateAsync('playbackInfo.mute', playerState.mute, true);\n        this.setStateAsync('playbackInfo.position', playerState.position, true);\n        this.setStateAsync('playbackInfo.random', playerState.random, true);\n        this.setStateAsync('playbackInfo.repeat', playerState.repeat, true);\n        this.setStateAsync('playbackInfo.repeatSingle', playerState.repeatSingle, true);\n        this.setStateAsync('queue.repeatTrackState', playerState.repeatSingle, true);\n        this.setStateAsync('playbackInfo.samplerate', playerState.samplerate, true);\n        this.setStateAsync('playbackInfo.seek', playerState.seek, true);\n        this.setStateAsync('playbackInfo.service', playerState.service, true);\n        this.setStateAsync('playbackInfo.status', playerState.status, true);\n        this.setStateAsync('playbackInfo.stream', playerState.stream, true);\n        this.setStateAsync('playbackInfo.title', playerState.title, true);\n        this.setStateAsync('playbackInfo.trackType', playerState.trackType, true);\n        this.setStateAsync('playbackInfo.updatedb', playerState.updatedb, true);\n        this.setStateAsync('playbackInfo.uri', playerState.uri, true);\n        this.setStateAsync('playbackInfo.volatile', playerState.volatile, true);\n        this.setStateAsync('playbackInfo.volume', playerState.volume, true);\n        this.setStateAsync('player.volume', playerState.volume, true);\n    }\n\n    private volumeMute(): void {\n        this.sendCmd<ApiResonse>('volume&volume=mute').then(r => {\n            if (r.response === 'volume Success') {\n                this.playerState.mute = true;\n                this.setStateAsync('player.muted', this.playerState.mute);\n                this.setStateAsync('playbackInfo.mute', this.playerState.mute);\n            } else {\n                this.log.warn(`Playpack mute was not successful: ${r.response}`);\n            }\n        });\n    }\n\n    private volumeUnmute(): void {\n        this.sendCmd<ApiResonse>('volume&volume=unmute').then(r => {\n            if (r.response === 'volume Success') {\n                this.playerState.mute = false;\n                this.setStateAsync('player.muted', this.playerState.mute);\n                this.setStateAsync('playbackInfo.mute', this.playerState.mute);\n            } else {\n                this.log.warn(`Playpack unmute was not successful: ${r.response}`);\n            }\n        });\n    }\n\n    private playbackPause(): void {\n        this.sendCmd<ApiResonse>('pause').then(r => {\n            if (r.response === 'pause Success') {\n                this.playerState.status = 'pause';\n                this.setStateAsync('playbackInfo.status', 'pause', true);\n            } else {\n                this.log.warn(`Playpack pause was not successful: ${r.response}`);\n            }\n        });\n    }\n\n    private playbackPlay(n?: any): void {\n        if (n && !isNumber(n)) {\n            this.log.warn('player.playN state change. Invalid state value passed');\n            return;\n        }\n        const cmdTxt = `play${n ? (`&N=${n}`) : ``}`;\n        this.sendCmd<ApiResonse>(cmdTxt).then(r => {\n            if (r.response === 'play Success') {\n                this.playerState.status = 'play';\n                this.setStateAsync('playbackInfo.status', 'play', true);\n            } else {\n                this.log.warn(`Playpack play was not successful: ${r.response}`);\n            }\n        });\n    }\n\n    private playbackStop(): void {\n        this.sendCmd<ApiResonse>('stop').then(r => {\n            if (r.response === 'stop Success') {\n                this.playerState.status = 'stop';\n                this.setStateAsync('playbackInfo.status', 'stop', true);\n            } else {\n                this.log.warn(`Playpack stop was not successful: ${r.response}`);\n            }\n        });\n    }\n\n    private playbackToggle(): void {\n        this.sendCmd<ApiResonse>('toggle').then(r => {\n            if (r.response === 'toggle Success') {\n                if (this.playerState.status == 'play') {\n                    this.playerState.status = 'pause'\n                } else if (this.playerState.status == 'pause' || this.playerState.status == 'stop') {\n                    this.playerState.status = 'play'\n                }\n            } else {\n                this.log.warn(`Playpack toggle was not successful: ${r.response}`);\n            }\n\n        });\n    }\n\n    private volumeSetTo(value: any): void {\n        if (!isNumber(value)) {\n            this.log.warn('volume state change. Invalid state value passed');\n            return;\n        } else if ((!value && value !== 0) || value > 100 || value < 0) {\n            this.log.warn('volume state change. Invalid state value passed');\n            return;\n        }\n        this.sendCmd<ApiResonse>(`volume&volume=${value}`).then(r => {\n            if (r.response === 'volume Success') {\n                this.playerState.volume = value as number;\n                this.setStateAsync('player.volume', value as number, true);\n                this.setStateAsync('playbackInfo.volume', value as number, true);\n            } else {\n                this.log.warn(`Volume change was not successful: ${r.response}`);\n            }\n        });\n\n    }\n\n    private volumeUp(): void {\n        let volumeSteps = this.config.volumeSteps;\n        if (!volumeSteps || volumeSteps > 100 || volumeSteps < 0) {\n            this.log.warn(`Invalid volume step setting. volumeSteps will be set to 10`);\n            volumeSteps = 10;\n        }\n        if (!this.playerState.volume) { // if volume unknown set to 0\n            this.playerState.volume = 0;\n        }\n        const newVolumeValue = ((this.playerState.volume + volumeSteps) > 100) ? 100 : this.playerState.volume + volumeSteps;\n        this.volumeSetTo(newVolumeValue);\n    }\n\n    private volumeDown(): void {\n        let volumeSteps = this.config.volumeSteps;\n        if (!volumeSteps || volumeSteps > 100 || volumeSteps < 0) {\n            this.log.warn(`Invalid volume step setting. volumeSteps will be set to 10`);\n            volumeSteps = 10;\n        }\n        if (!this.playerState.volume) { // if volume unknown set to 10\n            this.playerState.volume = 10;\n        }\n        const newVolumeValue = ((this.playerState.volume - volumeSteps) < 0) ? 0 : this.playerState.volume - volumeSteps;\n        this.volumeSetTo(newVolumeValue);\n    }\n\n    private setRandomPlayback(val: any): void {\n        if (typeof val !== 'boolean') {\n            this.log.warn('player.random state change. Invalid state value passed');\n            return;\n        }\n        this.sendCmd<ApiResonse>(`random&value=${val}`).then(r => {\n            if (r.response === 'random Success') {\n                this.playerState.random = val;\n                this.setStateAsync('playbackInfo.random', this.playerState.random, true);\n                this.setStateAsync('queue.shuffleMode', (val ? 1 : 0), true);\n            } else {\n                this.log.warn(`Random playback change was not successful: ${r.response}`);\n            }\n        });\n    }\n\n    private setRepeatTrack(val: any): void {\n        if (typeof val !== 'boolean') {\n            this.log.warn('player.repeatTrackState state change. Invalid state value passed');\n            return;\n        }\n        this.sendCmd<ApiResonse>(`repeat&value=${val}`).then(r => {\n            if (r.response === 'repeat Success') {\n                this.playerState.repeat = val;\n            } else {\n                this.log.warn(`repeat playback change was not successful: ${r.response}`);\n            }\n        });\n    }\n\n    private async subscribeToVolumioNotifications(): Promise<void> {\n        // check if already subscribed\n        this.log.debug(`Checking subscrition urls ...`);\n        const urls = JSON.stringify(\n            await this.apiGet<string>('pushNotificationUrls')\n                .catch(err => {\n                    this.log.warn(`Error receiving pushNotificationUrls: ${err.message}`);\n                    this.setStateAsync('info.connection', false, true);\n                    return '';\n                }));\n        this.setStateAsync('info.connection', true, true);\n        if (urls.includes(`${ipInfo.address()}:${this.config.subscriptionPort}`)) {\n            this.log.debug('Already subscribed to volumio push notifications');\n            return;\n        }\n        // enter local http server as notification url\n        const data = { 'url': `http://${ipInfo.address()}:${this.config.subscriptionPort}/volumiostatus` };\n        const res = await this.apiPost('pushNotificationUrls', data)\n            \t.catch(err => {\n                this.log.error(`Binding subscription url failed: ${err.message}`);\n                this.setStateAsync('info.connection', false, true);\n            }) as any;\n        if (!res || !res.success || res.success !== true) {\n            this.log.error(`Binding subscription url failed: ${res.error ? res.error : 'Unknown error'}`);\n            this.setStateAsync('info.connection', false, true);\n        }\n    }\n\n    private async unsubscribeFromVolumioNotifications(): Promise<void> {\n        // check if was subscribed\n        const urls = JSON.stringify(await this.apiGet<string>('pushNotificationUrls')\n            .catch(err => {\n                this.log.warn(`Error receiving pushNotificationUrls: ${err.message}`);\n                this.setStateAsync('info.connection', false, true);\n                return '';\n            }));\n        if (!urls.includes(`${ipInfo.address()}:${this.config.subscriptionPort}`)) {\n            this.log.debug('Subscription was not active. No need to unsubscribe')\n            return\n        }\n        // remove local http server from notification urls\n        const data = { 'url': `http://${ipInfo.address()}:${this.config.subscriptionPort}/volumiostatus` };\n        const res = await this.apiDelete('pushNotificationUrls', data)\n            .catch(err => {\n                this.log.error(`Error unsubscribing from pushNotificationUrls: ${err.message}`);\n                this.setStateAsync('info.connection', false, true);\n                return '';\n            }) as any;\n        if (!res || !res.success || res.success !== true) {\n            this.log.error(`Error unsubscribing from pushNotificationUrls: ${res.error ? res.error : 'Unknown error'}`);\n        }\n    }\n\n    private onVolumioStateChange(msg: StateChangeMsg): void {\n        if (!msg || !msg.item) {\n            this.log.warn(`Unprocessable state change message received: ${JSON.stringify(msg)}`);\n            return;\n        }\n        if (msg.item === 'state') {\n            this.propagatePlayserStateIntoStates(msg.data as PlayerState);\n        } else if (msg.item === 'queue') {\n            // not implemented yet\n        } else {\n            this.log.warn(`Unknown state change event: '${msg.data}'`);\n        }\n    }\n\n    private checkConnection(context: any) : void {\n        context.log.debug('Checking connection to Volumio ...');\n        if (context.config.subscribeToStateChanges) {\n            context.subscribeToVolumioNotifications();\n        } else {\n            context.pingVolumio();\n        }\n    }\n\n    private async pingVolumio(): Promise<boolean> {\n        this.log.debug('Pinging volumio ...');\n        return this.apiGet<string>('ping').then(pingResp => {\n            this.log.debug('Ping response');\n            this.setStateAsync('info.connection', true, true);\n            if (pingResp !== 'pong') {\n                this.log.warn(`Volumio API did not respond correctly to ping. Please report this issue to the developer!`);\n            }\n            return true;\n        }).catch(err => {\n            this.log.warn(`Connection to Volumio host ${this.config.host} failed: ${err.message}`);\n            this.setStateAsync('info.connection', false, true);\n            return false;\n        });\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n\n}\n\nfunction isNumber(value: any): boolean {\n    return ((value != null) &&\n        (value !== '') &&\n        !isNaN(Number(value.toString())));\n}\n\n\nif (module.parent) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Volumio(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Volumio())();\n}"],
  "mappings": "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",
  "names": ["axios", "express", "bodyParser", "ipInfo"]
}
