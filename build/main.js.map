{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.3\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\nimport axios, { AxiosInstance } from \"axios\";\nimport bodyParser from \"body-parser\";\nimport express from \"express\";\nimport ipInfo from \"ip\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Volumio extends utils.Adapter {\n\n    private axiosInstance: AxiosInstance | null = null;\n    private checkConnectionInterval: NodeJS.Timeout | null = null;\n    private httpServer;\n    private httpServerInstance: any;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: \"volumio\",\n        });\n        this.on(\"ready\", this.onReady.bind(this));\n        this.on(\"stateChange\", this.onStateChange.bind(this));\n        // this.on(\"objectChange\", this.onObjectChange.bind(this));\n        // this.on(\"message\", this.onMessage.bind(this));\n        this.on(\"unload\", this.onUnload.bind(this));\n\n        this.httpServer = express();\n        this.httpServer.use(bodyParser.urlencoded({ extended: false }));\n        this.httpServer.use(bodyParser.json());\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n\n        // Setup axios instance\n        this.axiosInstance = axios.create(\n            {\n                baseURL: `http://${this.config.host}/api/v1/`,\n                timeout: 1000,\n            }\n        );\n\n\n        // Reset the connection indicator during startup\n        this.setState(\"info.connection\", false, true);\n\n        // Subscribe to all state changes in the 'volumio' namespace\n        this.subscribeStates(\"*\");\n\n        // Try to ping the Volumio host\n        const connectionSuccess = await this.pingVolumio();\n\n        // Setup connection check interval\n        if (this.config.checkConnection) {\n            let interval = this.config.checkConnectionInterval;\n            if (!interval || !isNumber(interval)) {\n                this.log.error(`Invalid connection check interval setting. Will be set to 30s`);\n                interval = 30;\n            }\n            this.checkConnectionInterval = setInterval(this.checkConnection, interval*1000, this);\n        }\n\n        // get system infos\n        if (connectionSuccess) {\n            this.getSystemInfo();\n            // get inital player state\n            this.getPlayerState();\n        }\n\n        // setup subscription mode if enabled\n        if (this.config.subscribeToStateChanges && this.config.subscriptionPort && connectionSuccess) {\n            this.log.debug(`Starting server on ${this.config.subscriptionPort} for subscription mode ...`);\n            try {\n                this.httpServerInstance = this.httpServer.listen(this.config.subscriptionPort)\n                    .on(\"error\", (error: any) => {\n                        if (error.code === \"EADDRINUSE\") {\n                            this.log.error(`Port ${this.config.subscriptionPort} is already in use. Please choose another one. Subscription mode will not be available.`);\n                            this.config.subscribeToStateChanges = false;\n                        } else {\n                            this.log.error(`Starting server on ${this.config.subscriptionPort} for subscription mode failed: ${error}`);\n                        }\n                    });\n                this.log.debug(`Server is listening on ${ipInfo.address()}:${this.config.subscriptionPort}`);\n                this.subscribeToVolumioNotifications();\n            } catch (error) {\n                this.log.error(`Starting server on ${this.config.subscriptionPort} for subscription mode failed: ${error}. Subscription mode will not be available.`);\n                this.config.subscribeToStateChanges = false;\n            }\n        } else if (this.config.subscribeToStateChanges && !this.config.subscriptionPort) {\n            this.log.error(\"Subscription mode is activated, but port is not configured.\");\n        } else if (!this.config.subscribeToStateChanges && connectionSuccess) {\n            this.unsubscribeFromVolumioNotifications();\n        }\n\n        this.httpServer.post(\"/volumiostatus\", (req, res) => {\n            this.onVolumioStateChange(req.body)\n            res.sendStatus(200);\n        });\n\n        // The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n        // this.config:\n        // this.log.info(\"config option1: \" + this.config.option1);\n        // this.log.info(\"config option2: \" + this.config.option2);\n\n        /*\n        For every state in the system there has to be also an object of type state\n        Here a simple template for a boolean variable named \"testVariable\"\n        Because every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n        */\n        // await this.setObjectNotExistsAsync(\"testVariable\", {\n        //     type: \"state\",\n        //     common: {\n        //         name: \"testVariable\",\n        //         type: \"boolean\",\n        //         role: \"indicator\",\n        //         read: true,\n        //         write: true,\n        //     },\n        //     native: {},\n        // });\n\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n        // this.subscribeStates(\"testVariable\");\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n        // this.subscribeStates(\"lights.*\");\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n        // this.subscribeStates(\"*\");\n\n        /*\n            setState examples\n            you will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n        */\n        // the variable testVariable is set to true as command (ack=false)\n        // await this.setStateAsync(\"testVariable\", true);\n\n        // same thing, but the value is flagged \"ack\"\n        // ack should be always set to true if the value is received from or acknowledged from the target system\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true });\n\n        // same thing, but the state is deleted after 30s (getState will return null afterwards)\n        // await this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\n\n        // examples for the checkPassword/checkGroup functions\n        // let result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n        // this.log.info(\"check user admin pw iobroker: \" + result);\n\n        // result = await this.checkGroupAsync(\"admin\", \"admin\");\n        // this.log.info(\"check group user admin group admin: \" + result);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            this.unsubscribeFromVolumioNotifications();\n            // Here you must clear all timeouts or intervals that may still be active\n            // clearTimeout(timeout1);\n            // clearTimeout(timeout2);\n            // ...\n            // clearInterval(interval1);\n\n            if (this.checkConnectionInterval) {\n                clearInterval(this.checkConnectionInterval);\n                this.checkConnectionInterval = null;\n            }\n\n            // terminate express http server\n            this.httpServerInstance.close();\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (!state) {\n            this.log.info(`state ${id} deleted`);\n            return;\n        }\n\n        if (state.ack) {\n            this.log.silly(`State change of ${id} to \"${state.val}\" was already acknowledged. No need for further actions`);\n            return;\n        }\n        this.log.debug(`state ${id} changed to ${state?.val}`);\n        const stateId = id.replace(new RegExp(`^volumio.\\\\d+\\\\.`), \"\");\n        switch (stateId) {\n            case \"getPlaybackInfo\":\n                this.getPlayerState();\n                break;\n            case \"player.mute\":\n                this.volumeMute()\n                break;\n            case \"player.unmute\":\n                this.volumeUnmute();\n                break;\n            case \"player.next\":\n                this.nextTrack();\n                break;\n            case \"player.prev\":\n                this.previousTrack();\n                break;\n            case \"player.pause\":\n                this.playbackPause();\n                break;\n            case \"player.play\":\n                this.playbackPlay();\n                break;\n            case \"player.playN\":\n                this.playbackPlay(state.val)\n                break;\n            case \"player.stop\":\n                this.playbackStop();\n                break;\n            case \"player.toggle\":\n                this.playbackToggle();\n                break;\n            case \"playbackInfo.volume\":\n            case \"player.volume\":\n                this.volumeSetTo(state.val);\n                break;\n            case \"player.volume.down\":\n                this.volumeDown();\n                break;\n            case \"player.volume.up\":\n                this.volumeUp();\n                break;\n            case \"queue.clearQueue\":\n                this.clearQueue();\n                break;\n            case \"queue.repeatTrack\":\n                // toggle repeat track state\n                this.getStateAsync(\"playbackInfo.repeatSingle\", (err: any, state: { val: any; }) => {\n                    if (state) {\n                        this.setRepeatTrack(!state.val);\n                    }});\n                break;\n            case \"playbackInfo.random\":\n            case \"queue.random\":\n                this.setRandomPlayback(state.val);\n                break;\n            case \"queue.shuffleMode\":\n                if (!isNumber(state.val)) {\n                    this.log.warn(\"queue.shuffleMode state change. Invalid state value passed\");\n                    break;\n                }\n                if (state.val === 0) {\n                    this.setRandomPlayback(false);\n                } else if (state.val === 1) {\n                    this.setRandomPlayback(true);\n                } else if (state.val === 2) {\n                    this.log.warn(\"queue.shuffleMode 2 not implemented yet\");\n                } else {\n                    this.log.warn(\"Invalid value to queue.shuffleMode passed\");\n                }\n                break;\n            case \"queue.repeatTrackState\":\n                this.setRepeatTrack(state.val);\n                break;\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === \"object\" && obj.message) {\n    //         if (obj.command === \"send\") {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info(\"send command\");\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n    //         }\n    //     }\n    // }\n\n    private onVolumioStateChange(msg: any): void {\n        this.log.debug(`State change message received: ${JSON.stringify(msg)}`);\n        if (!msg || !msg.item) {\n            this.log.warn(`Unprocessable state change message received: ${JSON.stringify(msg)}`);\n            return;\n        }\n        if (msg.item === \"state\") {\n            this.updatePlayerState(msg.data);\n        } else if (msg.item === \"queue\") {\n            // not implemented yet\n        } else {\n            this.log.warn(`Unknown state change event: '${msg.data}'`);\n        }\n    }\n\n    private async subscribeToVolumioNotifications(): Promise<void> {\n        // check if already subscribed\n        this.log.debug(\"Checking subscrition urls ...\");\n        const urls = await this.getPushNotificationUrls();\n        if (!urls) {\n            return;\n        }\n        this.setStateAsync(\"info.connection\", true, true);\n        if (urls.includes(`${ipInfo.address()}:${this.config.subscriptionPort}`)) {\n            this.log.debug(\"Already subscribed to volumio push notifications\");\n            return;\n        }\n        // enter local http server as notification url\n        const data = { \"url\": `http://${ipInfo.address()}:${this.config.subscriptionPort}/volumiostatus` };\n        this.axiosInstance?.post(\"pushNotificationUrls\", data).then(response => {\n            if (response.data?.success) {\n                this.log.debug(\"Subscription to volumio push notifications successful\");\n            } else {\n                this.log.error(`Subscription to volumio push notifications failed: ${JSON.stringify(response?.data)}`);\n            }\n        }).catch(err => {\n            this.log.error(`Subscription to volumio push notifications failed: ${err.message}`);\n            this.setStateAsync(\"info.connection\", false, true);\n        });\n    }\n\n    private async getPushNotificationUrls(): Promise<string | null> {\n        return JSON.stringify(\n            await this.axiosInstance?.get(\"pushNotificationUrls\").then(response => {\n                return response.data;\n            }).catch(err => {\n                this.setStateAsync(\"info.connection\", false, true);\n                this.log.error(`Error receiving pushNotificationUrls: ${err.message}`);\n                return null;\n            })\n        );\n    }\n\n    private async unsubscribeFromVolumioNotifications(): Promise<void> {\n        this.log.debug(\"Unsubscribing from volumio push notifications ...\");\n        // check if was subscribed\n        const urls = await this.getPushNotificationUrls();\n        if (!urls) {\n            return;\n        }\n        if (!urls.includes(`${ipInfo.address()}:${this.config.subscriptionPort}`)) {\n            this.log.debug(\"Subscription was not active. No need to unsubscribe\")\n            return\n        }\n        // remove local http server from notification urls\n        const data = { \"url\": `http://${ipInfo.address()}:${this.config.subscriptionPort}/volumiostatus` };\n        this.axiosInstance?.delete(\"pushNotificationUrls\", data).then(response => {\n            if (response.data?.success) {\n                this.log.debug(\"Unsubscription from volumio push notifications successful\");\n            } else {\n                this.log.error(`Unsubscription from volumio push notifications failed: ${JSON.stringify(response?.data)}`);\n            }\n        }).catch(err => {\n            this.log.error(`Unsubscription from volumio push notifications failed: ${err.message}`);\n            this.setStateAsync(\"info.connection\", false, true);\n        });\n    }\n\n    async pingVolumio(): Promise<boolean> {\n        this.log.debug(\"Pinging volumio ...\");\n        try {\n            this.log.debug(\"Volumio ping success\");\n            const response = await this.axiosInstance?.get(\"ping\");\n            this.setState(\"info.connection\", true, true);\n            if (response?.data !== \"pong\") {\n                this.log.warn(`Volumio API did not respond correctly to ping. Please report this issue to the developer!`);\n            }\n            return true;\n        } catch (error) {\n            this.log.error(`Connection to Volumio host (${this.config.host}) failed: ${error}`);\n            this.setState(\"info.connection\", false, true);\n            return false;\n        }\n    }\n\n    private checkConnection(context: any) : void {\n        context.log.debug(\"Checking connection to Volumio ...\");\n        if (context.config.subscribeToStateChanges) {\n            context.subscribeToVolumioNotifications();\n        } else {\n            context.pingVolumio();\n        }\n    }\n\n    private getSystemInfo(): void {\n        this.axiosInstance?.get(\"getSystemInfo\").then(response => {\n            this.log.debug(`getSystemInfo response: ${JSON.stringify(response?.data)}`);\n            if (response.data) {\n                this.updateSystemInfo(response.data);\n            }\n            if (response.data?.state) {\n                this.updatePlayerState(response.data.state);\n            }\n\n        }).catch(error => {\n            this.log.error(`Error getting system info: ${error}`);\n        });\n    }\n\n    private getPlayerState(): void {\n        this.axiosInstance?.get(\"getState\").then(response => {\n            this.log.debug(`getState response: ${JSON.stringify(response?.data)}`);\n            if (response.data) {\n                this.updatePlayerState(response.data);\n            }\n        }).catch(error => {\n            this.log.error(`Error getting player state: ${error}`);\n        });\n    }\n\n    private updatePlayerState(state: any) : void {\n        //TODO: remove this debug log\n        this.log.debug(`Updating player state ...`);\n        if (state.status) {\n            this.setStateAsync(\"playbackInfo.status\", state.status, true);\n        }\n        if (state.position) {\n            this.setStateAsync(\"playbackInfo.position\", state.position, true);\n        }\n        if (state.title && state.track) {\n            if (state.title !== state.track) {\n                this.log.warn(`Title and track attibutes are both set but differ. Title will be set to ${state.title}`);\n                this.setStateAsync(\"playbackInfo.title\", state.title, true);\n            }\n            this.setStateAsync(\"playbackInfo.title\", state.title, true);\n        }\n        else if (state.title) {\n            this.setStateAsync(\"playbackInfo.title\", state.title, true);\n        }\n        else if (state.track) {\n            this.setStateAsync(\"playbackInfo.title\", state.track, true);\n        }\n        if (state.artist) {\n            this.setStateAsync(\"playbackInfo.artist\", state.artist, true);\n        }\n        if (state.album) {\n            this.setStateAsync(\"playbackInfo.album\", state.album, true);\n        }\n        if (state.albumart) {\n            this.setStateAsync(\"playbackInfo.albumart\", state.albumart, true);\n        }\n        if (state.uri) {\n            this.setStateAsync(\"playbackInfo.uri\", state.uri, true);\n        }\n        if (state.trackType) {\n            this.setStateAsync(\"playbackInfo.trackType\", state.trackType, true);\n        }\n        if (state.seek) {\n            this.setStateAsync(\"playbackInfo.seek\", state.seek, true);\n        }\n        if (state.duration) {\n            this.log.debug(`Set Duration: ${state.duration}`);\n            this.setStateAsync(\"playbackInfo.duration\", state.duration, true);\n        }\n        if (state.samplerate) {\n            this.setStateAsync(\"playbackInfo.samplerate\", state.samplerate, true);\n        }\n        if (state.bitdepth) {\n            this.setStateAsync(\"playbackInfo.bitdepth\", state.bitdepth, true);\n        }\n        if (state.channels) {\n            this.setStateAsync(\"playbackInfo.channels\", state.channels, true);\n        }\n        if (state.random) {\n            this.setStateAsync(\"playbackInfo.random\", state.random, true);\n        }\n        if (state.repeat) {\n            this.setStateAsync(\"playbackInfo.repeat\", state.repeat, true);\n        }\n        if (state.repeatSingle) {\n            this.setStateAsync(\"playbackInfo.repeatSingle\", state.repeatSingle, true);\n        }\n        if (state.consume) {\n            this.setStateAsync(\"playbackInfo.consume\", state.consume, true);\n        }\n        if (state.volume) {\n            this.setStateAsync(\"playbackInfo.volume\", state.volume, true);\n        }\n        if (state.dbVolume) {\n            this.setStateAsync(\"playbackInfo.dbVolume\", state.dbVolume, true);\n        }\n        if (state.disableVolumeControl) {\n            this.setStateAsync(\"playbackInfo.disableVolumeControl\", state.disableVolumeControl, true);\n        }\n        if (state.mute) {\n            this.setStateAsync(\"playbackInfo.mute\", state.mute, true);\n        }\n        if (state.stream) {\n            this.setStateAsync(\"playbackInfo.stream\", state.stream, true);\n        }\n        if (state.updatedb) {\n            this.setStateAsync(\"playbackInfo.updatedb\", state.updatedb, true);\n        }\n        if (state.volatile) {\n            this.setStateAsync(\"playbackInfo.volatile\", state.volatile, true);\n        }\n        if (state.service) {\n            this.setStateAsync(\"playbackInfo.service\", state.service, true);\n        }\n    }\n\n    private updateSystemInfo(systemInfo: any) : void {\n        if (systemInfo.id) {\n            this.setStateAsync(\"info.id\", systemInfo.id, true);\n        }\n        if (systemInfo.host) {\n            this.setStateAsync(\"info.host\", systemInfo.host, true);\n        }\n        if (systemInfo.name) {\n            this.setStateAsync(\"info.name\", systemInfo.name, true);\n        }\n        if (systemInfo.type) {\n            this.setStateAsync(\"info.type\", systemInfo.type, true);\n        }\n        if (systemInfo.serviceName) {\n            this.setStateAsync(\"info.serviceName\", systemInfo.serviceName, true);\n        }\n        if (systemInfo.systemversion) {\n            this.setStateAsync(\"info.systemversion\", systemInfo.systemversion, true);\n        }\n        if (systemInfo.builddate) {\n            this.setStateAsync(\"info.builddate\", systemInfo.builddate, true);\n        }\n        if (systemInfo.variant) {\n            this.setStateAsync(\"info.variant\", systemInfo.variant, true);\n        }\n        if (systemInfo.hardware) {\n            this.setStateAsync(\"info.hardware\", systemInfo.hardware, true);\n        }\n        if (systemInfo.isPremiumDevice) {\n            this.setStateAsync(\"info.isPremiumDevice\", systemInfo.isPremiumDevice, true);\n        }\n        if (systemInfo.isVolumioProduct) {\n            this.setStateAsync(\"info.isVolumioProduct\", systemInfo.isVolumioProduct, true);\n        }\n    }\n\n    private nextTrack(): void {\n        this.axiosInstance?.get(\"commands/?cmd=next\").then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(\"Next track\");\n            } else {\n                this.log.warn(`Next track failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error playing next track: ${error}`);\n        });\n    }\n\n    private previousTrack(): void {\n        this.axiosInstance?.get(\"commands/?cmd=prev\").then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(\"Previous track\");\n            } else {\n                this.log.warn(`Previous track failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error playing previous track: ${error}`);\n        });\n    }\n\n    private volumeMute(): void {\n        this.axiosInstance?.get(\"commands/?cmd=volume&volume=mute\").then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(\"Volume muted\");\n                this.setStateAsync(\"playbackInfo.mute\", true, true);\n                this.setStateAsync(\"player.mute\", true, true);\n            } else {\n                this.log.warn(`Volume muting failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error muting volume: ${error}`);\n        });\n    }\n\n    private volumeUnmute(): void {\n        this.axiosInstance?.get(\"commands/?cmd=volume&volume=unmute\").then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(\"Volume unmuted\");\n                this.setStateAsync(\"playbackInfo.mute\", false, true);\n                this.setStateAsync(\"player.mute\", false, true);\n            } else {\n                this.log.warn(`Volume unmuting failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error unmuting volume: ${error}`);\n        });\n    }\n\n    private playbackPause(): void {\n        this.axiosInstance?.get(\"commands/?cmd=pause\").then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(\"Playback paused\");\n                this.setStateAsync(\"playbackInfo.status\", \"pause\", true);\n            } else {\n                this.log.warn(`Playback pausing failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error pausing playback: ${error}`);\n        });\n    }\n\n    private playbackPlay(n? : any): void {\n        if (n && !isNumber(n)) {\n            this.log.warn(\"player.playN state change. Invalid state value passed\");\n            return;\n        }\n        const cmdTxt = `play${n ? (`&N=${n}`) : ``}`;\n        this.axiosInstance?.get(`commands/?cmd=${cmdTxt}`).then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(\"Playback started\");\n                this.setStateAsync(\"playbackInfo.status\", \"play\", true);\n            } else {\n                this.log.warn(`Playback starting failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error starting playback: ${error}`);\n        });\n    }\n\n    private playbackStop(): void {\n        this.axiosInstance?.get(\"commands/?cmd=stop\").then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(\"Playback stopped\");\n                this.setStateAsync(\"playbackInfo.status\", \"stop\", true);\n            } else {\n                this.log.warn(`Playback stopping failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error stopping playback: ${error}`);\n        });\n    }\n\n    private playbackToggle(): void {\n        this.axiosInstance?.get(\"commands/?cmd=toggle\").then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(\"Playback toggled\");\n                this.getState(\"playbackInfo.status\", (err, state) => {\n                    if (state?.val === \"play\") {\n                        this.setStateAsync(\"playbackInfo.status\", \"pause\", true);\n                    } else if (state?.val === \"pause\" || state?.val === \"stop\") {\n                        this.setStateAsync(\"playbackInfo.status\", \"play\", true);\n                    }\n                });\n            } else {\n                this.log.warn(`Playback toggling failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error toggling playback: ${error}`);\n        });\n    }\n\n    private volumeSetTo(value: any): void {\n        if (!isNumber(value)) {\n            this.log.warn(\"player.volume state change. Invalid state value passed\");\n            return;\n        }\n        this.axiosInstance?.get(`commands/?cmd=volume&volume=${value}`).then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(`Volume set to ${value}`);\n                this.setStateAsync(\"playbackInfo.volume\", value, true);\n                this.setStateAsync(\"player.volume\", value);\n            } else {\n                this.log.warn(`Volume setting failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error setting volume: ${error}`);\n        });\n    }\n\n    private volumeUp(): void {\n        let volumeSteps = this.config.volumeSteps;\n        if (!volumeSteps || volumeSteps > 100 || volumeSteps < 0) {\n            this.log.warn(`Invalid volume step setting. volumeSteps will be set to 10`);\n            volumeSteps = 10;\n        }\n        let currentVolume : number = 0;\n        this.getState(\"playbackInfo.volume\", (err, state) => {\n            if (state) {\n                currentVolume = state.val as number;\n            } else {\n                this.log.warn(\"Volume state not found. Setting volume to 0\");\n                currentVolume =  0;\n            }});\n        const newVolumeValue = ((currentVolume + volumeSteps) > 100) ? 100 : currentVolume + volumeSteps;\n        this.volumeSetTo(newVolumeValue);\n    }\n\n    private volumeDown(): void {\n        let volumeSteps = this.config.volumeSteps;\n        if (!volumeSteps || volumeSteps > 100 || volumeSteps < 0) {\n            this.log.warn(`Invalid volume step setting. volumeSteps will be set to 10`);\n            volumeSteps = 10;\n        }\n        let currentVolume : number = 0;\n        this.getState(\"playbackInfo.volume\", (err, state) => {\n            if (state) {\n                currentVolume = state.val as number;\n            } else {\n                this.log.warn(\"Volume state not found. Setting volume to 0\");\n                currentVolume =  0;\n            }});\n        const newVolumeValue = ((currentVolume - volumeSteps) < 0) ? 0 : currentVolume - volumeSteps;\n        this.volumeSetTo(newVolumeValue);\n    }\n\n    private setRandomPlayback(random: any): void {\n        if (typeof random !== \"boolean\") {\n            this.log.warn(\"player.random state change. Invalid state value passed\");\n            return;\n        }\n        this.axiosInstance?.get(`commands/?cmd=random&value=${random}`).then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(`Random play set to ${random}`);\n                this.setStateAsync(\"playbackInfo.random\", random, true);\n                this.setStateAsync(\"queue.shuffleMode\", (random ? 1 : 0), true);\n\n            } else {\n                this.log.warn(`Random play setting failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error setting random play: ${error}`);\n        });\n    }\n\n    private clearQueue(): void {\n        this.axiosInstance?.get(`commands/?cmd=clearQueue`).then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(`Queue cleared`);\n            } else {\n                this.log.warn(`Queue clearing failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error clearing queue: ${error}`);\n        });\n    }\n\n    private setRepeatTrack(repeat: any): void {\n        if (typeof repeat !== \"boolean\") {\n            this.log.warn(\"player.repeatTrackState state change. Invalid state value passed\");\n            return;\n        }\n        this.axiosInstance?.get(`commands/?cmd=repeat&value=${repeat}`).then(response => {\n            if (response.data?.response?.toLowerCase().includes(\"success\")) {\n                this.log.debug(`Repeat track set to ${repeat}`);\n                this.setStateAsync(\"playbackInfo.repeatSingle\", repeat, true);\n                this.setStateAsync(\"queue.repeatSingle\", (repeat ? 1 : 0), true);\n            } else {\n                this.log.warn(`Repeat track setting failed: ${response.data}`);\n            }\n        }).catch(error => {\n            this.log.error(`Error setting repeat track: ${error}`);\n        });\n    }\n}\n\nfunction isNumber(value: any): boolean {\n    return ((value != null) &&\n        (value !== \"\") &&\n        !isNaN(Number(value.toString())));\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Volumio(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Volumio())();\n}"],
  "mappings": "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",
  "names": ["express", "bodyParser", "axios", "ipInfo", "state", "_a"]
}
